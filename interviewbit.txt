//swap the greatest number


var arr=[20,50,113];
for(i=0;i<arr.length;i++){


if(arr[i+2]>arr[i+1])
{
  
  var tem=arr[i+1];
  arr[i+1]=arr[i+2];
  arr[i+2]=tem;
  
}
else{
  arr;
}
}

//Repeat and Missing Number Array

var app=[1,2,3,4,2];
var arr=app.sort((a,b)=>a-b);
var rawal=[];
  for(var i=0;i<=arr.length;i++)
  {
    if(arr[i+1]-arr[i]>1)
    {
      rawal.push(arr[i+1]-1);
    }
    else if(arr[i+1]===arr[i])
    {
       console.log(arr[i]) ;
    }
    else{
    console.log(arr);
    }
  }
  (rawal);

//largest number formed
var d=[2,30,56,90];
let e=d.join("").split("").sort((a,b)=>b-a).join("");
parseInt(e);

//common interval in array:
var arr=[1,10,30,40];
let app=arr.sort((a,b)=>a-b);
if(app.length<=2)
{
console.log(0);
}
else{
  app.slice(-1)[0]-app.slice(-2)[0];
}


//Add One To Number:124 output
var abs=[1,2,3];

let r=abs.slice(-1)[0]+1;
let k=abs.map(function(item){
  return item==abs.slice(-1)[0]?r:item;
});
console.log(k);
let g=k.join('');
console.log(



//add array incerese one element:output 22
var abs=[2,3,4,5,7];

let r=abs.slice(-1)[0]+1;
let k=abs.map(function(item){
  return item==abs.slice(-1)[0]?r:item;
});
console.log(k);
let c=k.reduce((a,b)=>a+b);
console.log(c);


///shortet path in maze
var matrix = [
  [0, 1, 0, 1, 0],
  [0, 0, 1, 0, 0],
  [0, 0, 1, 1, 0],
  [0, 0, 0, 0, 0],
  [0, 1, 0, 1, 0]
];

var start = [4, 0];
var end = [3, 4];

function findWay(position, end) {
  var queue = [];

  matrix[position[0]][position[1]] = 1;
  queue.push([position]); 

  while (queue.length > 0) {
    var path = queue.shift(); 
    var pos = path[path.length-1]; 
    var direction = [
      [pos[0] + 1, pos[1]],
      [pos[0], pos[1] + 1],
      [pos[0] - 1, pos[1]],
      [pos[0], pos[1] - 1]
    ];

    for (var i = 0; i < direction.length; i++) {
     
      if (direction[i][0] == end[0] && direction[i][1] == end[1]) {
        // return the path that led to the find
        return path.concat([end]); 
      }
      
      if (direction[i][0] < 0 || direction[i][0] >= matrix[0].length 
          || direction[i][1] < 0 || direction[i][1] >= matrix[0].length 
          || matrix[direction[i][0]][direction[i][1]] != 0) { 
        continue;
      }

      matrix[direction[i][0]][direction[i][1]] = 1;
     
      queue.push(path.concat([direction[i]])); 
    }
  }
}

var path = findWay(start, end);
console.log(JSON.stringify(path));


///Sorted array and unSorted Array
var arr=[1,2,3,4,5];

for(var i=0;i<arr.length;i++)
{
  if(arr[i+1]-arr[i]===1)
  {
    console.log(-1)
    break;
  }
  else
  {
    var cat=arr.sort((a,b)=>a-b);
  console.log (cat[0],cat[1]);
  break;
  }
}


///Anti Diagonals
var arr=[[1,2,3],[4,5,6],[7,8,9]];
const N=3;
for(var s=0;s<N;s++){
  for(var i=s;i>-1;i--)
  {
    console.log(arr[i][s-i]+ " ");
  }
  console.log();
}
for(var s=1;s<N;s++){
  for(var i=N-1;i>=s;i--){
    console.log(arr[i][s+N-1-i] + " ")
  }
  console.log();
}

//max non negative subarray:
var arr=[1,2,4,5,-7,8];
console.log(arr);
var d=arr.sort((a,b)=>b-a);
console.log(arr);
for(var i=0;i<d.length;i++)
{
  
if(arr[i]<=-1)
{
var rit=d.pop();
console.log(rit);
console.log(d);
var r=d.slice(0,2);
var cat=r.reduce((a,b)=>a+b);
console.log(cat);
}

}
var p=d.slice(2,5);
var rat=p.reduce((c,d)=>c+d);
console.log(rat);
if(cat>rat){
  console.log(p);
}
else{
  console.log(r);
}




/////Row of a pascal traingle
function Row(arr) {
    var result = [];
 
    if (arr < 0)
        return result;
 
    result.push(1);
    for (var i = 1; i <= arr; i++) {
        for (var j = result.length-2; j >= 0; j--) {
           result[j + 1] = result[j] + result[j + 1];
         
        }
      
       result.push(1);
        
    }
    return result;
}

console.log(Row(3));

///Pascal Triangle 

function PascalTriangle(Rows)
 {
  var pascal = [];
  
  for (var i = 0; i < Rows; i++) { 
    pascal[i] = new Array(i+1);
    
    for (var j = 0; j < i+1; j++) {            
      if (j === 0 || j === i) {
        pascal[i][j] = 1;
      } else {
        pascal[i][j] = pascal[i-1][j-1] + pascal[i-1][j];
      }
    }
  }
  
  return pascal;
}

console.log(PascalTriangle(7));

//Max Sum Contiguous Subarray

function  nby3(arr, n){
	count1 = 0;
	count2 = 0;
	first = arr.length;
	second = arr.length;
	for(var i=0;i<n;i++){
         if (first == arr[i]){
	count1 += 1;
    }
   else if (second == arr[i])
    {
	count2 += 1;
    }
	else if(count1 == 0)
    {
	count1 += 1;
	first = arr[i];
    }
    else if (count2 == 0)
    {
	count2 += 1;
	second = arr[i];
    }
else
      {
	count1 -= 1;
	count2 -= 1;
      }
  }
	count1 = 0;
	count2 = 0;
for(var i=0;i<n;i++){
if (arr[i] == first){
	count1 += 1;
     }
      else if (arr[i] == second){
			count2 += 1;
       }
 if (count1 > n / 3){
return first;
   }

 if (count2 > n / 3){
return second;
    return -1;
  }

 }
}
arr = [7, 3,2, 6, 2,3,2,2];
n = arr.length;
console.log(nby3(arr, n));

//Max subArray//output 6

function maxarray(a,size){
  result1=0;
  result2=0;
  for(var i=0;i<size;i++){
    result2=result2+a[i];
    if(result1<result2){
      result1=result2;

    }
    if(result2<0){
      result2=0;
    }
  }
  return result1;
}
var a=[-2,1,-3,4,-1,2,1,-5,4];
console.log(maxarray(a,a.length));


//Longest Subarray of non-nagitive

function  longestSubarry(arr,n){
    res = 0;
    for(var i=0;i<n;i++){
      count = 0;
        while (i < n && arr[i] >= 0)
        {
        count+=1;
       i+=1;
        }
     
       
res = Math.max(res, count);
    }
     
    return res;
}
 
 
arr= [1, 0, 4, 0, 1, -1, -1, 0, 0, 1, 0];
n = arr.length;
console.log(longestSubarry(arr, n));

//Pyrimd Problem

var no=0;
for(var i=0;i<=5;i++){
 
  for(var j=1;j<=i;j++){
    no++;
    
    console.log(i);
  }
  console.log();
}